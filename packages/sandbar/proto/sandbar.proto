syntax = "proto3";

import "google/api/annotations.proto";
import "google/rpc/status.proto";

option java_multiple_files = true;
option java_package = "io.grpc.sandbar";

package sandbar.v0;

/// Data ingestion service ingests events describing change of state to
/// different information types.
service SandbarApiService {
  // This endpoint takes in events and processes them based on the metadata
  // associated with them.
  rpc SubmitEvents(SubmitEventsRequest) returns (SubmitEventsResponse) {
    option (google.api.http) = {
      post: "/v0/submit_event"
      body: "*"
    };
  }

  rpc SubmitEventAndGetRuleOutputs(SubmitEventAndGetRuleOutputsRequest) returns (SubmitEventAndGetRuleOutputsResponse) {
    option (google.api.http) = {
      post: "/v0/submit_event_get_rule_outputs"
      body: "*"
    };
  }

  // This simple endpoint just takes in and returns an entity.
  rpc GetEntity(GetEntityRequest) returns (GetEntityResponse) {
    option (google.api.http) = {
      post: "/v0/get_entity"
      body: "*"
    };
  }

  // This end point is used to get information about a given account.
  rpc GetAccount(GetAccountRequest) returns (GetAccountResponse) {
    option (google.api.http) = {
      post: "/v0/get_account"
      body: "*"
    };
  }

  // This is to retrieve the set of latest rule outputs for a given entity for all rules.
  rpc GetRuleOutputForEntities(GetRuleOutputForEntitiesRequest) returns (GetRuleOutputForEntitiesResponse) {
    option (google.api.http) = {
      post: "/v0/results_for_entities"
      body: "*"
    };
  }

  // This endpoint retrieves all the accounts that are associated with a given entity.
  rpc GetAccountsForEntity(GetAccountsForEntityRequest) returns (GetAccountsForEntityResponse) {
    option (google.api.http) = {
      post: "/v0/get_accounts_for_entity"
      body: "*"
    };
  }

  // This endpoint will return all the transactions for a given entity.
  rpc GetTransactionsForEntity(GetTransactionsForEntityRequest) returns (GetTransactionsForEntityResponse) {
    option (google.api.http) = {
      post: "/v0/get_transactions_for_entity"
      body: "*"
    };
  }

  // This query will return a set of specified alerts.
  rpc GetAlerts(GetAlertsRequest) returns (GetAlertsResponse) {
    option (google.api.http) = {
      post: "/v0/get_alerts"
      body: "*"
    };
  }

  // This query will return a set of specified investigations.
  rpc GetInvestigations(GetInvestigationsRequest) returns (GetInvestigationsResponse) {
    option (google.api.http) = {
      post: "/v0/get_investigations"
      body: "*"
    };
  }

  // This query will return all investigations for an entity.
  rpc GetAllInvestigations(GetAllInvestigationsRequest) returns (GetAllInvestigationsResponse) {
    option (google.api.http) = {
      post: "/v0/get_all_investigations"
      body: "*"
    };
  }

  // This allows a user to manually close a given alert. If this closes the last open alert in
  // an investigation, this call will close the enclolsed investigation as well.
  rpc CloseAlert(CloseAlertRequest) returns (CloseAlertResponse) {
    option (google.api.http) = {
      post: "/v0/close_alert"
      body: "*"
    };
  }

  // This allows a user to manually close a given investigation. This will close all enclosed
  // alerts that remain open.
  rpc CloseInvestigation(CloseInvestigationRequest) returns (CloseInvestigationResponse) {
    option (google.api.http) = {
      post: "/v0/close_investigation"
      body: "*"
    };
  }

  // This is to retrieve the history of rule output for a given entity for all rules.
  // Entity search arg because we are essentially looking up the entity where we
  // then have to
  rpc GetRuleOutputHistoryForEntity(GetRuleOutputHistoryForEntityRequest) returns (GetRuleOutputHistoryForEntityResponse) {
    option (google.api.http) = {
      post: "/v0/results_history_for_entity"
      body: "*"
    };
  }

  // Create a comment for a specified object
  rpc CreateComment(CreateCommentRequest) returns (CreateCommentResponse) {
    option (google.api.http) = {
      post: "/v0/create_comment"
      body: "*"
    };
  }

  // Update the contents of an existing comment
  rpc UpdateComment(UpdateCommentRequest) returns (UpdateCommentResponse) {
    option (google.api.http) = {
      post: "/v0/update_comment"
      body: "*"
    };
  }

  // Retrieves all comments for the specified investigation
  rpc GetCommentsForInvestigation(GetCommentsForInvestigationRequest) returns (GetCommentsForInvestigationResponse) {
    option (google.api.http) = {
      post: "/v0/comments_for_investigation"
      body: "*"
    };
  }

  // Retrieves all comments for the specified alert
  rpc GetCommentsForAlert(GetCommentsForAlertRequest) returns (GetCommentsForAlertResponse) {
    option (google.api.http) = {
      post: "/v0/comments_for_alert"
      body: "*"
    };
  }

  // Associates a tag with an object (either an investigation or an alert)
  rpc AddTagToObject(AddTagToObjectRequest) returns (AddTagToObjectResponse) {
    option (google.api.http) = {
      post: "/v0/add_tag_to_object"
      body: "*"
    };
  }

  // Removes the association between a tag and an object
  rpc RemoveTagFromObject(RemoveTagFromObjectRequest) returns (RemoveTagFromObjectResponse) {
    option (google.api.http) = {
      post: "/v0/remove_tag_from_object"
      body: "*"
    };
  }

  // Gets all tags associated with an object
  rpc GetTagsForObjects(GetTagsForObjectsRequest) returns (GetTagsForObjectsResponse) {
    option (google.api.http) = {
      post: "/v0/get_tags_for_objects"
      body: "*"
    };
  }

  // Lists all tags that have been associated with objects
  rpc ListTags(ListTagsRequest) returns (ListTagsResponse) {
    option (google.api.http) = {
      post: "/v0/list_tags"
      body: "*"
    };
  }

  // Updates the analysis associated with an object (must be an investigation)
  rpc UpdateAnalysis(UpdateAnalysisRequest) returns (UpdateAnalysisResponse) {
    option (google.api.http) = {
      post: "/v0/update_analysis"
    };
  }

  // Gets the analyses associated with the specified objects
  rpc GetAnalysesForObjects(GetAnalysesForObjectsRequest) returns (GetAnalysesForObjectsResponse) {
    option (google.api.http) = {
      post: "/v0/get_analysis_for_objects"
    };
  }

  // Creates a link between a file and an investigation or an alert in our system.
  // This method returns an upload link to submit the file's contents.
  rpc AddAttachment(AddAttachmentRequest) returns (AddAttachmentResponse) {
    option (google.api.http) = {
      post: "/v0/add_attachment"
    };
  }

  // Gets URLs at which the contents of previously uploaded attachments can be found
  rpc GetAttachmentDownloadUrls(GetAttachmentDownloadUrlsRequest) returns (GetAttachmentDownloadUrlsResponse) {
    option (google.api.http) = {
      post: "/v0/get_attachment_download_urls"
    };
  }

  // Associates an attachment that has already been associated with an investigation or alert
  // with another such object in our system. The existing attachment can be referenced by the
  // Sandbar-generated unique ID returned by the AddAttachment call.
  rpc AddAttachmentToObject(AddAttachmentToObjectRequest) returns (AddAttachmentToObjectResponse) {
    option (google.api.http) = {
      post: "/v0/add_attachment_to_object"
      body: "*"
    };
  }

  // Removes the association between an attachment and an object. If an attachment is no longer associated
  // with any object, it will be deleted from our records.
  rpc RemoveAttachmentFromObject(RemoveAttachmentFromObjectRequest) returns (RemoveAttachmentFromObjectResponse) {
    option (google.api.http) = {
      post: "/v0/remove_attachment_from_object"
      body: "*"
    };
  }

  // Gets all attachments associated with an object
  rpc GetAttachmentsForObjects(GetAttachmentsForObjectsRequest) returns (GetAttachmentsForObjectsResponse) {
    option (google.api.http) = {
      post: "/v0/get_attachments_for_objects"
      body: "*"
    };
  }

  // Adds information about a user-determined risk.
  rpc AddManualReport(AddManualReportRequest) returns (AddManualReportResponse) {
    option (google.api.http) = {
      post: "/v0/add_manual_report"
      body: "*"
    };
  }

  // Highlights an object as significant to an investigation or alert
  rpc HighlightObjectForInvestigationOrAlert(HighlightObjectForInvestigationOrAlertRequest) returns (HighlightObjectForInvestigationOrAlertResponse) {
    option (google.api.http) = {
      post: "/v0/highlight_object_for_investigation_or_alert"
      body: "*"
    };
  }

  // Removes a highlighted object from an investigation or alert
  rpc RemoveHighlightedObject(RemoveHighlightedObjectRequest) returns (RemoveHighlightedObjectResponse) {
    option (google.api.http) = {
      post: "/v0/remove_highlighted_object"
      body: "*"
    };
  }

  // Lists all highlighted objects for an investigation or alert
  rpc GetHighlightedObjects(GetHighlightedObjectsRequest) returns (GetHighlightedObjectsResponse) {
    option (google.api.http) = {
      post: "/v0/get_highlighted_objects"
      body: "*"
    };
  }
}

// Message containing a detailed error response
message ErrorDetails {
  // The details of the error
  string details = 1;
}

/* @exclude EVENT SECTION */

// Set of events to be processed and ingested by sandbar.
message SubmitEventsRequest {
  // List of events to be processed.
  repeated Event events = 1;
}

// Event to be processed and have any relevant rules run.
message SubmitEventAndGetRuleOutputsRequest {
  // Event to be processed
  Event event = 1;
}

message Event {
  reserved 1;
  reserved "change_effective_date";
  // This is an indication of the type of event that is being sent and of how the data is intended to be processed.
  EventType type = 2;
  // The payload of the event. The object in this field represents the state of the object at the time of the event.
  oneof payload {
    // Entity payload for the event. The object in this field represents the state of the object at the time of the event. Expect one of this, account, transaction, or account_entity_link.
    Entity entity = 3;
    // Account payload for the event. The object in this field represents the state of the object at the time of the event. Expect one of this, entity, transaction, or account_entity_link.
    Account account = 4;
    // Transaction payload for the event. The object in this field represents the state of the object at the time of the event. Expect one of this, entity, account, or account_entity_link.
    Transaction transaction = 5;
    // Account entity link payload for the event. The object in this field represents the state of the object at the time of the event. Expect one of this, entity, account, or transaction.
    AccountEntityLink account_entity_link = 6;
  }
  // We may have information about a thing that is not quite complete. It may
  // be missing required info. If you use this flag we will try to make a complete
  // item, but we will remove some of the validation and requirements that some
  // pieces of information must be present. We may also generate a uuid as the
  // source ID if one is not provided.
  // Incomplete items can be tracked and later appended, merged, etc. if necessary.
  bool incomplete = 7;
}

// Information about an event that was processed
message EventResponse {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
  // The sandbar ID of the item created/changed/deleted by the event.
  string sandbar_id = 2;
  // The source ID of the item created/changed/deleted by the event that the time the event was sent.
  string source_id = 3;
 // In the event that there is an incomplete item, this is the sandbar-generated ID for the object.
  string generated_id = 4;
  // Specifies the type of payload that this message is in response to
  EventResponseType event_response_type = 5;
  // The event as submitted
  Event request = 6;
}

// Response from a call to submit events endpoint.
message SubmitEventsResponse {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
  // List of responses. Not guaranteed to be in the same order as the requests.
  repeated EventResponse responses = 2;
}

// Response from a call to submit events and get rule outputs endpoint.
message SubmitEventAndGetRuleOutputsResponse {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
  // The sandbar ID of the item created/changed/deleted by the event.
  string sandbar_id = 2;
  // The source ID of the item created/changed/deleted by the event that the time the event was sent.
  string source_id = 3;
  // In the event that there is an incomplete item, this is the sandbar-generated ID for the object.
  string generated_id = 4;
  // Specifies the type of payload that this message is in response to
  EventResponseType event_response_type = 5;
  // The event as submitted
  Event request = 6;
  // List of all rule outputs triggered by the event submission.
  repeated RuleOutput rule_outputs = 7;
}


/* @exclude ENTITY SECTION */

//
// Object containing information about a given entity. An entity represents a person,
// company, or other thing that is potentially able to be an owner of an account.
message Entity {
  // The sandbar ID of the given entity.
  // This should not be set on events submitted to sandbar for `OPERATION_TYPE_CREATE`.
  // Guaranteed to be present in the response.
  optional string sandbar_entity_id = 1;
  // The ID of the entity in the source system.
  // Required for events submitted to sandbar.
  // Guaranteed to be present in the response if the entity is not generated.
  optional string source_entity_id = 2;
  // The date the relationship between this entity and the institution began.
  optional string relationship_begin_date = 3;
  // Name of the entity.
  // Required for events submitted to sandbar.
  // Guaranteed to be present in the response if the entity is not generated.
  optional string name = 4;
  // If a person, this field contains their birthdate. If a company, the field contains the incorporation date of the entity.
  // Required for events submitted to sandbar.
  // Guaranteed to be present in the response if the entity is not generated.
  optional string birth_incorporation_date = 5;
  // The primary address of the entity. For a business, to better assess risk, using a registration address, or a P.O. box gives less information than a headquarters, or a place of operation.
  // Required for events submitted to sandbar.
  // Guaranteed to be present in the response if the entity is not generated.
  optional Address primary_address = 6;
  // Best email address to reach a client at.
  optional string email = 7;
  // A tax identifier for an entity; a TIN or SSN in the U.S. would be preferred.
  optional string tax_id = 8;
  // Employer ID Number.
  optional string ein = 9;
  // For a business, the NAIC code of the industry they operate in.
  // A full list of NAIC classifications and descriptions can be found at https://www.census.gov/naics/2017NAICS/2017_Definition_File.pdf.
  optional string naic_code = 10;
  // For a business, the website they use to operate.
  optional string website_url = 11;
  // In the event that we are working with an incomplete entity, this generated ID may be used. This field should not be set upon creation.
  // Sandbar will create this id on the callers behalf.
  // This should not be set on events submitted to sandbar for `OPERATION_TYPE_CREATE` if the `event.incomplete` is set to `true`.
  // Guaranteed to be present in the response if the entity is generated.
  optional string generated_entity_id = 12;
  // Best phone number to reach a client at.
  optional string phone_number = 13;
}

// Query containing entity information.
message EntityQuery {
  // A parameter containing information needed to identify an entity.
  repeated EntityQueryIdParam ids = 1;
  reserved 2, 3;
  reserved "knowledge_date", "effective_date";
}

// A request containing information necessary to get rule outputs for a given entity.
message GetRuleOutputForEntitiesRequest {
  // Specifies which entities to request for rule outputs for.
  EntityQuery request = 1;
}

// A request containing information necessary to get a given entity.
message GetEntityRequest {
  // Specifies entities to request detailed information on.
  EntityQuery request = 1;
}

// A response containing requested entity information.
message GetEntityResponse {
  // Contents the entities requested.
  repeated Entity entity = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

/* @exclude ACCOUNT SECTION */

// Information sufficient to identify a given account.
message AccountIdentifier {
  // An account number that is at any given point in time globally unique within a given institution.
  string account_number = 1;
  // An institution that the given account belongs to.
  string bank_name = 2;
}

// Object containing info about an account.
message Account {
  // A sandbar ID for a given account.
  optional string sandbar_account_id = 1;
  // The information used to uniquely identify an account at a given point in time.
  AccountIdentifier account_identifier = 2;
  // The type of account.
  AccountType account_type = 3;
  // If an account contains crypto-currency, this is the wallet's unique identifier
  optional string crypto_wallet_address = 4;
  // The type of crypto held in this wallet.
  optional string crypto_currency = 5;
  // The date a given account was opened.
  optional string account_open_date = 6;
  // The date a given account was closed.
  optional string account_close_date = 7;
}

message AccountQueryIdParam {
  oneof id {
    // A sandbar ID for a given account.
    string sandbar_account_id = 1;
    // The information used to uniquely identify an account at a given point in time.
    AccountIdentifier account_identifier = 2;
  }
}

// The request sent when trying to get a specific account from sandbar.
message GetAccountRequest {
  repeated AccountQueryIdParam id = 1;
  reserved 3, 4;
  reserved "knowledge_date", "effective_date";
}

// Response containing requested account related information and a message.
message GetAccountResponse {
  // Set of accounts
  repeated Account accounts = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A transaction may go through many different states in its lifetime. This represents the different
// stages of a life cycle. A user may update the state on a single transaction over time as it transitions.
enum TransactionStatus {
  TRANSACTION_STATUS_UNSPECIFIED = 0;
  // A transaction that has been initiated but not yet confirmed. Can be ignored in many calculations if never finished.
  TRANSACTION_STATUS_INITIATED = 1;
  TRANSACTION_STATUS_PROCESSING = 2;
  // For most transactions this should be the status that they remain in. This represents a transaction that has been
  // processed and is now final.
  TRANSACTION_STATUS_FINISHED = 3;
  // A transaction that has been declined by the processor.
  TRANSACTION_STATUS_DECLINED = 4;
  // A transaction that has been voided by the user.
  TRANSACTION_STATUS_VOIDED = 5;
  // A transaction that has been returned.
  TRANSACTION_STATUS_RETURNED = 6;
  TRANSACTION_STATUS_OTHER = 100;
}

//
// Type of account
enum AccountType {
  ACCOUNT_TYPE_UNSPECIFIED = 0;
  // A checking account
  ACCOUNT_TYPE_CHECKING = 1;
  // A savings account
  ACCOUNT_TYPE_SAVINGS = 2;
  // A credit card
  ACCOUNT_TYPE_CREDIT_CARD = 3;
  // A brokerage account, intended to hold and trade securities.
  ACCOUNT_TYPE_BROKERAGE = 4;
  // Another account type not specified here.
  ACCOUNT_TYPE_OTHER = 100;
}

// A request payload that allows a user to get a set of accounts for a given entity.
message GetAccountsForEntityRequest {
  // Information about the entity qe are trying to get accounts for.
  EntityQueryIdParam id = 1;
}

// A response payload that contains information about a set of accounts owned by a single entity.
message GetAccountsForEntityResponse {
  // Set of accounts
  repeated Account accounts = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

/* TRANSACTION */
message Transaction {
  // A transaction ID generated by Sandbar that uniquely identifies a transaction in our system.
  optional string sandbar_transaction_id = 1;
  // The unique internal client ID identifying this specific transaction. This should remain unchanged across transaction states.
  string source_transaction_id = 2;
  // The amount of cash moved in a given transaction.
  double transaction_amount = 3;
  // The currency of the cash that is moved in a given transaction.
  string transaction_currency = 4;
  // Account the transaction is associated with.
  AccountIdentifier account_identifier = 5;
  // A unique identifier in a source system for a given transaction. This should be consistent between any state transfers that occur for a given transaction.
  string transaction_source_entity_id = 6;
  // The identifier in the source system for the transaction counterparty.
  optional string counterparty_source_entity_id = 7;
  // The identifier in the source system for the counterparty account.
  optional AccountIdentifier counterparty_account_identifier = 8;
  // Free text field used by either party of a transaction to explain the purpose of the activity.
  optional string originator_to_beneficiary_information = 9;
  // The type of the specified transaction.
  TransactionType transaction_type = 10;
  // The date and time that a transaction was executed.
  string execute_transaction_date_time = 11;
  // Field which indicates whether funds flowed into or out of the account.
  bool is_credit = 12;
  // Free form text field with information about a transaction.
  optional string description = 13;
  // Indicates whether a card was present at the time of the purchase.
  optional bool is_card_present = 14;
  // Name of the merchant on the transaction.
  optional string merchant_name = 15;
  // The date and time that a transaction settles.
  optional string settle_transaction_date_time = 16;
  // The time zone that the transaction occurred in,
  // as the TZ database name that appears in the IANA time zone database.
  // Examples include "America/New_York" and "US/Eastern".
  optional string transaction_time_zone = 17;
  // Indicates whether the cvv test was issued.
  optional bool cvv_test = 18;
  // The IP address from which a transaction is initiated.
  optional string ip_address = 19;
  // Swift identifiers of the counterparty bank.
  optional string counterparty_swift_identifiers = 20;
  // Address of the merchant on the transaction.
  optional Address merchant_address = 21;
  // Address of the bank branch where the transaction occurred.
  optional Address branch_address = 22;
  // Address of the ATM where a transaction occurred.
  optional Address atm_address = 23;
  // Single point of reference which ties together credit cards by the same issuer of the same rewards type
  optional string card_reference_number = 24;
  // 15 digit International Mobile Equipment Identity number that is unique to the device regardless of who manufactured it
  optional string device_imei = 25;
  // Unique number used by each manufacturer to identify the device
  optional string device_serial_number = 26;
  // Unique Subscriber Identification Module assigned to each card by the service provider
  optional string device_sim = 27;
  // Alphanumeric string that uniquely identifies the check, money order, cashier's check, traveler's check, etc. used in the transaction
  optional string instrument_serial_number = 28;
  // Shipping address associated with a given transaction.
  optional Address shipping_address = 29;
  // Billing address associated with a transaction.
  optional Address billing_address = 30;
  // Instrument used for the transmission of funds.  See enumerated list for options and descriptions.
  ProductType product_type = 31;
  // Merchant Category Code (MCC) number which identifies the industry of the business.  List of relevant MCC codes can be found here: https://www.web-payment-software.com/online-merchant-accounts/mcc-codes/
  optional string merchant_type = 32;
  // The status of a transaction.
  optional TransactionStatus transaction_status = 33;
  // The routing number associated with a given transaction.
  optional int32 transaction_source_routing_number = 34;
  // The routing number associated with a counterparty in a  given transaction.
  optional int32 counterparty_routing_number = 35;
}

// A set of transactions associated with a requested entity.
message GetTransactionsForEntityResponse {
  // Set of requested transactions.
  repeated Transaction transactions = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A request that allows a user to get all the transactions associated with a given entity.
message GetTransactionsForEntityRequest {
  // Specifies the entity to request information on.
  EntityQueryIdParam id = 1;
}

/* RULE OUTPUT */
// Certain actions prompt sandbar to run our suite of rules against an investigation target.
// Each time this happens, a rule output is generated with information about the risk assessed
// for that target. This object contains that information.
message RuleOutput {
  // This is a unique human-readable name of a given rule.
  string rule = 1;
  // This indicates a version of the rule being run.
  int64 rule_version = 2;
  // A score indicating the riskiness associated with this rule output. The risk score is bounded between 0 and 100.
  double risk_score = 3;
  // A narrative constructed based on the circumstances around the rule being run.
  string narrative = 4;
  // The time when the given rule output was generated.
  string timestamp = 5;
  // Identifies the investigation target the rule ran against.
  InvestigationTarget investigation_target = 6;
  reserved 7, 8;
  reserved "knowledge_date", "effective_date";
}

// A response containing rule outputs for a given investigation target.
message RuleOutputResponse {
  // Identifies the investigation target the rule ran against.
  InvestigationTarget investigation_target = 1;
  // Rule outputs associated with the given investigation target.
  repeated RuleOutput output = 2;
}

//
message GetRuleOutputForEntitiesResponse {
  // Requested rule outputs.
  repeated RuleOutputResponse responses = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A request payload that contains entity information used to get rule output history for that entity.
message GetRuleOutputHistoryForEntityRequest {
  // Specifies the entity to request information on.
  EntityQueryIdParam id = 1;
}

// A message containing a history of rule outputs for a given entity.
message GetRuleOutputHistoryForEntityResponse {
  // All rule outputs generated throughout history for a given entity.
  RuleOutputResponse response = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

/* Account-Entity Links */
message AccountEntityLink {
  // Sandbar ID for the given link. Expected in any change or delete event, but not in a create event.
  optional string sandbar_link_id = 1;
  oneof account_id {
    // Expect to see either this or sandbar_account_id. Identifying information for an account from client system.
    AccountIdentifier source_account_identifier = 2;
    // Expect to see either this or source_account_identifier. Identifying information for an account from sandbar system.
    string sandbar_account_id = 3;
  }
  // Information uniquely identifying an entity.
  EntityQueryIdParam entity_id = 4;
  // The date the account is linked to the entity.
  string start_date = 5;
  // The date the account is unlinked from the entity.
  optional string end_date = 6;
  // Free text field with information about the link.
  optional string description = 7;
}

/* @exclude OTHER */

//
// Object that keeps information about an address.
message Address {
  optional string street_address_line_1 = 1;
  optional string street_address_line_2 = 2;
  optional string city = 3;
  optional string state_or_province = 4;
  optional string zip = 5;

  // two-letter ISO3166 country code
  string country = 6;

  // Indicates if the address is a standard address, military, PO Box, etc.
  optional AddressType type = 7;
}

//
// The type of event sent over by the user.
enum EventType {
  EVENT_TYPE_UNSPECIFIED = 0;
  // To be sent when creating a new item. If sent when an item already exists
  // a creation event will fail and nothing will be created in the system.
  EVENT_TYPE_CREATE = 1;
  // To be sent when updating an existing item. If the item does not exist
  // the update will fail and nothing will be changed in the system.
  EVENT_TYPE_UPDATE = 2;
  // Delete an entity. This will delete the item as of the time of the call to SubmitEvents().
  // If an item does not exist the delete will fail.
  // Please use caution with deletes. They may have some odd side effects that are not
  // expected as other objects referencing this object may have to continue to use
  // the deleted item (i.e. if an entity is deleted, an investigation on that entity
  // may be required to continue to exist.)
  EVENT_TYPE_DELETE = 3;
}

// In an Alert, a Next Step is a suggested course of action that an analyst may take to
// either confirm or alleviate the given described risk.
message NextStep {
  // A description of the action to be taken.
  string description = 1;
}

// When a rule creates an output that is deemed sufficiently risky, we create an alert.
// Alerts can also be created due to manually uploaded reports of potential risks.
// An alert groups all relevant information after the initial trigger into one place.
// For a single investigation, all associated manual reports will be grouped into one alert.
message Alert {
  // Sandbar identifier for a given alert.
  string sandbar_alert_id = 1;
  oneof trigger {
    // Rule outputs that triggered the alert
    RuleOutputsForAlert rule_outputs = 2;
    // Manual reports of risk that triggered the alert
    ManualReportsForAlert manual_reports = 3;
  }
  // The investigation target associated with this alert.
  InvestigationTarget investigation_target = 4;
  // Set of next steps a user may be able to take to help assess the risk associated with a given alert and help an analyst decide whether or not to file a SAR.
  repeated NextStep next_steps = 5;
  // High water mark within look-back window
  double high_water_mark_risk_score = 6;
  // The status of the investigation into the alert.
  InvestigationStatus status = 7;
}

// Information about a rule that triggered an alert
message RuleOutputsForAlert {
  // Set of rule outputs for the rule that triggered the alert
  repeated RuleOutput rule_outputs = 1;
  // A human readable name of the rule associated with the Alert. Not present if the alert is the result
  // of user-entered risk information.
  string rule = 2;
  // This indicates a version of a given rule that is being run.
  int64 rule_version = 3;
}

// A list of manual reports that triggered an alert
message ManualReportsForAlert {
  // The manual reports
  repeated ManualReport manual_reports = 1;
}

// An investigation is a unit of work comprised of one or more alerts. This is the thing that an analyst or a group
// of analysts should be working on. There may be one or more targets, and one or more types of risk topographies.
// By default an investigation groups alerts on a given investigation unit.
message Investigation {
  // Sandbar ID of the given investigation.
  string sandbar_investigation_id = 1;
  // Set of alerts associated with the investigation.
  repeated Alert alerts = 2;
  // The targets of a given investigation.
  repeated InvestigationTarget target = 3;
  // The status of the investigation.
  InvestigationStatus status = 4;
}

// The status of a given investigation.
enum InvestigationStatus {
  INVESTIGATION_STATUS_UNSPECIFIED = 0;
  // An open investigation that requires attention.
  INVESTIGATION_STATUS_OPEN = 1;
  // An investigation that has been automatically closed by Sandbar due to its age.
  INVESTIGATION_STATUS_AUTO_CLOSED = 2;
  // An investigation that has been manually closed by a user upon assessment that the activity
  // does not warrant a SAR filing.
  INVESTIGATION_STATUS_MANUALLY_CLOSED_CLEARED = 3;
  // An investigation that has been manually closed by a user upon assessment that the activity
  // is suspicious and requires a SAR filing.
  INVESTIGATION_STATUS_MANUALLY_CLOSED_SUSPICIOUS = 4;
  // An investigation that is oh hold pending some internal or external action necessary
  // to continue the assessment.
  INVESTIGATION_STATUS_ON_HOLD = 5;
  // An investigation that is in the process of being worked on by an investigator.
  INVESTIGATION_STATUS_IN_PROGRESS = 6;
  // Another investigation status that is not specified here.
  INVESTIGATION_STATUS_OTHER = 100;
}

// Request for one or more alerts.
message GetAlertsRequest {
  // Sandbar IDs for requested alerts.
  repeated string sandbar_alert_id = 1;
}

// Response containing requested alerts.
message GetAlertsResponse {
  // Requested alerts.
  repeated Alert alerts = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// An unfiltered request for investigations.
message GetAllInvestigationsRequest {
  // Options for the investigation request.
  message Options {
    // If set to `true`, the response will include closed investigations.
    bool include_closed = 1;
  }
  // Options for a given investigation request.
  optional Options options = 1;
}

// A response sent in response to a request for all investigations.
message GetAllInvestigationsResponse {
  // The set of requested investigations.
  repeated Investigation investigations = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// Identifying information about a given entity.
message EntityQueryIdParam {
  oneof entity_id {
    // Sandbar entity ID, expect to see one of this, source_entity_id, or generated_entity_id.
    string sandbar_entity_id = 1;
    // Entity ID in the source system, expect to see one of this, sandbar_entity_id, or generated_entity_id.
    string source_entity_id = 2;
    // Sandbar generated ID for incomplete entities, expect to see one of this, sandbar_entity_id, or source_entity_id.
    string generated_entity_id = 3;
  }
}

// Identifying information about an entity as an Investigation Target
message TargetEntityId {
  // Sandbar entity ID for the given investigation target.
  string sandbar_entity_id = 1;
  // Entity ID in the source system for the given investigation target.
  optional string source_entity_id = 2;
  // Sandbar generated ID for incomplete entities for the given investigation target.
  optional string generated_entity_id = 3;
}

// Information about a target of an investigation.
message InvestigationTarget {
  string sandbar_target_id = 1;
}

// A request for a set of investigations
message GetInvestigationsRequest {
  // Sandbar IDs of investigations to request detailed information on.
  repeated string sandbar_investigation_id = 1;
}

// A response containing the requested set of investigations.
message GetInvestigationsResponse {
  // Set of requested investigations.
  repeated Investigation investigation = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A request to close an alert.
message CloseAlertRequest {
  // Sandbar identifier of alert to be closed.
  string sandbar_alert_id = 1;
}

// A response carrying information about the result of a request to close an alert.
message CloseAlertResponse {
  // Information about the disposition of the closed alert.
  CloseResult result = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A request to close an investigation.
message CloseInvestigationRequest {
  // Sandbar identifier of investigation to be closed.
  string sandbar_investigation_id = 1;
}

// A response carrying information about the result of a request to close an investigation.
message CloseInvestigationResponse {
  // Information about the disposition of the closed investigation.
  CloseResult result = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A request containing the contents of a comment
// and the sandbar ID and type of the object
// the comment is for
// (must be an alert or investigation)
message CreateCommentRequest {
  // The sandbar ID of the subject
  string subject_sandbar_id = 1;
  // The contents of the comment
  string contents = 2;
}

// A response containing information about a newly created comment
message CreateCommentResponse {
  // The sandbar ID of the created comment
  string sandbar_comment_id = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A request containing the updated contents
// of an existing comment
message UpdateCommentRequest {
  // The sandbar ID of the comment to update
  string sandbar_comment_id = 1;
  // The new contents of the comment
  string contents = 3;
}

// A response carrying information about the result of a request to update a comment.
message UpdateCommentResponse {
  // The sandbar ID of the updated comment
  string sandbar_comment_id = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A request for all comments associated with an investigation
message GetCommentsForInvestigationRequest {
  // The sandbar ID of the investigation to fetch comments for
 string sandbar_investigation_id = 1;
}

// A response containing all comments for the requested investigation
message GetCommentsForInvestigationResponse {
  // All comments on the investigation
  repeated Comment comments = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A request for all comments associated with an alert
message GetCommentsForAlertRequest {
  // The sandbar ID of the alert to fetch comments for
  string sandbar_alert_id = 1;
}

// A response containing all comments for the requested alert
message GetCommentsForAlertResponse {
  // All comments on the alert
  repeated Comment comments = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A user-generated comment on an object in our system
message Comment {
  // The sandbar-generated unique id for the comment
  string sandbar_comment_id = 1;
  // The text of the comment
  string contents = 2;
  // The sandbar-generated unique ID for the object the comment references
  string subject_sandbar_id = 3;
  // The time the comment was first created
  string created_time = 4;
  // The time the comment was most recently updated
  string updated_time = 5;
}

// A request to associate a a tag with an object (must be an alert or an investigation)
message AddTagToObjectRequest {
  // The sandbar-generated unique ID for the object to associate the tag with
  string subject_sandbar_id = 1;
  oneof tag {
    // The contents of the tag
    string tag_contents = 2;
    // The sandbar-generated unique ID for an existing tag
    string tag_sandbar_id = 3;
  }
}

// A response containing information about the tag associated with an object
message AddTagToObjectResponse {
  // The sandbar-generated unique ID for the tag-object link
  string tag_object_link_sandbar_id = 1;
  // The sandbar-generated unique ID for the tag
  string tag_sandbar_id = 2;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 3;
}

// A request to remove an association between a tag and an object
message RemoveTagFromObjectRequest {
  // The sandbar-generated unique ID for the object the tag is associated with
  string subject_sandbar_id = 1;
  // The contents of the tag to remove from the object
  oneof tag {
    // The contents of the tag
    string tag_contents = 2;
    // The sandbar-generated unique ID for an existing tag
    string tag_sandbar_id = 3;
  }
}

// A response confirming a tag is no longer associated with an object
message RemoveTagFromObjectResponse {
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 1;
}

// A request for all tags associated with the specified objects
message GetTagsForObjectsRequest {
  // The sandbar-generated unique IDs of the objects
  repeated string subject_sandbar_ids = 1;
}

message GetTagsForObjectsResponse {
  // A mapping between objects' unique sandbar-generated IDs and a list of tags associated with them
  map<string, TagObjectLinkList> tags_by_subject_sandbar_id = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A request to list all tags that have been associated with objects
message ListTagsRequest {

}

// A response containing all tags that have been associated with objects
message ListTagsResponse {
  // The tags
  repeated Tag tags = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states of one or more request payloads.
  string message = 2;
}

// A tag that can be associated with an object
message Tag {
  // The sandbar-generated unique ID for the tag
  string tag_sandbar_id = 1;
  // The contents of the tag
  string contents = 2;
}

// Information about a tag associated with an object
message TagObjectLink {
  // The sandbar-generated unique ID for the tag-object link
  string sandbar_id = 1;
  // The sandbar-generated unique ID for the tag
  string tag_sandbar_id = 2;
  // The sandbar-generated unique ID for the object associated with the tag
  string subject_sandbar_id = 3;
  // The contents of the tag
  string contents = 4;
  // The time the tag was associated with the object
  string time = 5;
}

// A list of tag-object links
message TagObjectLinkList {
  // The tag object links
  repeated TagObjectLink tag_object_links = 1;
}

// A request to update the contents of the analysis for an object specified by the ID.
message UpdateAnalysisRequest {
  // The subject's sandbar-generated unique ID
  string subject_sandbar_id = 1;
  // The new contents of the subject's analysis
  string contents = 2;
}

// A response containing the updated analysis
message UpdateAnalysisResponse {
  // The analysis for the subject with the updated contents
  Analysis analysis = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states.
  string message = 2;
}

// A request for the analyses for one or more objects
message GetAnalysesForObjectsRequest {
  // The sandbar-generated unique IDs of the objects
  repeated string subject_sandbar_ids = 1;
}

// A response containing the analyses for the specified objects.
message GetAnalysesForObjectsResponse {
  // A mapping between objects' unique sandbar-generated IDs and the analyses associated with them
  map<string, Analysis> analyses_by_subject_sandbar_id = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states.
  string message = 2;
}

message Analysis {
  // The subject's sandbar-generated unique ID
  string subject_sandbar_id = 1;
  // The contents of the subject's analysis
  string contents = 2;
}

// A request to upload a file that can be associated with other objects
message AddAttachmentRequest {
  // The name of the file
  string file_name = 1;
  // The file's HTTP MIME type, see https://datatracker.ietf.org/doc/html/rfc6838
  string content_type = 2;
  // The sandbar-generated unique ID of the object to associate the attachment with (must be an investigation or an alert)
  string object_sandbar_id = 3;
}

// A response containing information about the added attachment,
// including a URL to upload the contents of the file to.
message AddAttachmentResponse {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
  // The sandbar-generated unique ID for the attachment
  string attachment_sandbar_id = 2;
  // A URL to upload the contents of the attachment file
  string url = 3;
}

// A request for a link that can be used to download previously uploaded attachments
message GetAttachmentDownloadUrlsRequest {
  // The sandbar-generated unique ID of the attachment
  repeated string attachment_sandbar_ids = 1;
}

// A response containing URLs for retrieving the contents of previously uploaded attachments.
message GetAttachmentDownloadUrlsResponse {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
  // A mapping between attachment's sandbar-generated unique IDs and URLs at which their contents can be found
  map<string, AttachmentDownloadLink> urls_by_attachment_sandbar_id = 2;
}

// A response containing a URL to download the contents of an attachment from.
message AttachmentDownloadLink {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
  // The URL at which the attachment can be downloaded.
  string url = 2;
}

// A request to associate an attachment with an object (must be an alert or an investigation)
message AddAttachmentToObjectRequest {
  // The sandbar-generated unique ID for the object to associate the attachment with
  string object_sandbar_id = 1;
  // The sandbar-generated unique ID for the attachment
  string attachment_sandbar_id = 2;
}

// A response containing information about the attachment associated with an object
message AddAttachmentToObjectResponse {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
  // The sandbar-generated unique ID for the attachment-object link
  string attachment_object_link_sandbar_id = 2;
}

// A request to remove an association between a attachment and an object
message RemoveAttachmentFromObjectRequest {
  // The sandbar-generated unique ID for the object the attachment is associated with
  string object_sandbar_id = 1;
  // The sandbar-generated unique ID for the attachment
  string attachment_sandbar_id = 3;
}

// A response confirming a attachment is no longer associated with an object
message RemoveAttachmentFromObjectResponse {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
}

// A request for all attachments associated with the specified objects
message GetAttachmentsForObjectsRequest {
  // The sandbar-generated unique IDs of the objects
  repeated string object_sandbar_ids = 1;
}

// A response containing all attachments for objects, indexed by the sandbar-generated
// unique ID for each object
message GetAttachmentsForObjectsResponse {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
  // A mapping between objects' unique sandbar-generated IDs and a list of attachments associated with them
  map<string, AttachmentObjectLinkList> attachments_by_subject_sandbar_id = 2;
}

// Information about an attachment uploaded to Sandbar
message Attachment {
  // The Sandbar-generated unique ID for the attachment
  string attachment_sandbar_id = 1;
  // The attachment's file name
  string file_name = 2;
  // The attachment's content type
  string content_type = 3;
}

// Information about an attachment associated with an object
message AttachmentObjectLink {
  // The sandbar-generated unique ID for the attachment-object link
  string attachment_object_link_sandbar_id = 1;
  // The sandbar-generated unique ID for the object the attachment is associated with
  string object_sandbar_id = 2;
  // The attachment
  Attachment attachment = 3;
}

// A list of attachment-object links
message AttachmentObjectLinkList {
  // Information about processing the request, including any error information
  google.rpc.Status status = 1;
  // The attachment object links
  repeated AttachmentObjectLink attachment_object_links = 2;
}

// A request to add a report based on manual risk analysis
// At least one identifier for the reporter is required.
message AddManualReportRequest {
 // The sandbar-generated unique ID of the report's investigation target, which must be an entity
 string target_sandbar_id = 1;
 // A narrative about the nature of the risk and how it was identified
 optional string narrative = 2;
 // A categorization of the level of risk posed
 ManualReportRiskLevel risk_level = 3;
 // The name of the person who reported the risk
 optional string reporter_name = 4;
 // Your institution's identifier for the person who reported the risk
 optional string reporter_id = 5;
 // The person who reported the risk's email address
 optional string reporter_email_address = 6;
}

// Categorizations for the level of risk for a manual report
enum ManualReportRiskLevel {
  MANUAL_REPORT_RISK_LEVEL_UNSPECIFIED = 0;
  MANUAL_REPORT_RISK_LEVEL_LOW = 1;
  MANUAL_REPORT_RISK_LEVEL_MEDIUM = 2;
  MANUAL_REPORT_RISK_LEVEL_HIGH = 3;
}

// A response containing the result of adding a rule output
message AddManualReportResponse {
  // The created manual report
  ManualReport manual_report = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states
  string message = 2;
}

// Information about manually uploaded risk information
message ManualReport {
  // Identifies the investigation target the report applies to.
  InvestigationTarget investigation_target = 1;
  // A narrative about the nature of the risk and how it was identified
  optional string narrative = 2;
  // A categorization of the level of risk posed
  ManualReportRiskLevel risk_level = 3;
  // The name of the person who reported the risk
  optional string reporter_name = 4;
  // Your institution's identifier for the person who reported the risk
  optional string reporter_id = 5;
  // The person who reported the risk's email address
  optional string reporter_email_address = 6;
  // The time when the manual report was created
  string timestamp = 7;
  // The sandbar-generated unique ID of the alert this manual report triggered
  string sandbar_alert_id = 8;
}

// A request to highlight an object as significant to an investigation or alert
message HighlightObjectForInvestigationOrAlertRequest {
  // The sandbar-generated unique ID of the object to highlight. The object must be an entity, account, or transaction.
  string object_sandbar_id = 1;
  // The sandbar-generated unique ID of the investigation or alert
  string investigation_alert_sandbar_id = 2;
}

// A response confirming an object was highlighted for an investigation
message HighlightObjectForInvestigationOrAlertResponse {
  // Message containing information about the processing of the request, including error messages
  // and information about failure states
  string message = 1;
}

// A request to remove a highlighted object from an investigation or alert
message RemoveHighlightedObjectRequest {
  // The sandbar-generated unique ID of the object
  string object_sandbar_id = 1;
  // The sandbar-generated unique ID of the investigation or alert
  string investigation_alert_sandbar_id = 2;
}

// A response confirming an object is no longer highlighted for an investigation or alert
message RemoveHighlightedObjectResponse {
  // Message containing information about the processing of the request, including error messages
  // and information about failure states
  string message = 1;
}

// A request to get all objects highlighted for an investigation or alert
message GetHighlightedObjectsRequest {
  // The sandbar-generated unique ID for the investigation or alert
  string investigation_alert_sandbar_id = 1;
}

// A response containing the objects highlighted for an investigation or alert
message GetHighlightedObjectsResponse {
  // The sandbar-generated unique ID of the highlighted objects
  repeated string object_sandbar_ids = 1;
  // Message containing information about the processing of the request, including error messages
  // and information about failure states
  string message = 2;
}

// The various possible results of a request to close an alert or investigation.
enum CloseResult {
  CLOSE_RESULT_UNSPECIFIED = 0;
  // The item was successfully closed.
  CLOSE_RESULT_SUCCESSFUL = 1;
  // The object was not found.
  CLOSE_RESULT_NOT_FOUND = 2;
  // The object was already closed and nothing changed.
  CLOSE_RESULT_ALREADY_CLOSED = 3;
  // There was some issue closing this item, specified in the message.
  CLOSE_RESULT_FAILED = 4;
  CLOSE_RESULT_OTHER = 100;
}

// Each transaction must specify a transaction type to indicate how money was moved. These are presently
// derived from the transaction types used to file SAR forms.
enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  // Results in a decrease to the balance of the account
  TRANSACTION_TYPE_WITHDRAWAL = 1;
  // Results in an increase to the balance of the account
  TRANSACTION_TYPE_DEPOSIT = 2;
  // Exchange of funds between two different government issued currencies
  TRANSACTION_TYPE_CURRENCY_EXCHANGE = 3;
  // Exchange of denominations in physical cash or coins
  TRANSACTION_TYPE_CASH_EXCHANGE = 4;
  // Price charged for a specific service
  TRANSACTION_TYPE_FEES = 5;
  // Compulsory contribution to state revenue, levied by the government on workers' income and business profits
  TRANSACTION_TYPE_TAXES = 6;
  // Claim upon a part of another's property that arises because of an unpaid debt related to that property
  TRANSACTION_TYPE_LIENS = 7;
  // Instruction by an investor to a broker to acquire stock shares, bonds, or other assets
  TRANSACTION_TYPE_BUY = 8;
  // Instruction by an investor to a broker to sell stock shares, bonds, or other assets
  TRANSACTION_TYPE_SELL = 9;
  // Uses a price to designate the least acceptable amount for the transaction to take place
  TRANSACTION_TYPE_LIMIT_ORDER = 10;
  // Uses a price to merely trigger an actual order once the specified price has been traded
  TRANSACTION_TYPE_STOP_ORDER = 11;
  // Final transaction to fully zero out the account balance when closing the relationship
  TRANSACTION_TYPE_ACCOUNT_CLOSING_DEBIT = 12;
  // Electronic transfer of funds between two individual parties
  TRANSACTION_TYPE_P2P_PAYMENT = 13;
  // Electronic transfer of funds between two financial institutions
  TRANSACTION_TYPE_BANK_TRANSFER = 14;
  // Electronic transfer of funds involving the exchange of cryptocurrency assets
  TRANSACTION_TYPE_CRYPTO_TRANSFER = 15;
  // Trade involving international currencies or their derivatives
  TRANSACTION_TYPE_FOREX = 16;
  // Funds distributed by a local, state, or federal agency
  TRANSACTION_TYPE_GOVERNMENT_PAYMENT = 17;
  // Derivative contract where two parties exchange the cash flows or liabilities from two different financial instruments
  TRANSACTION_TYPE_SWAP = 18;
  // Another transaction type that is not enumerated here.
  TRANSACTION_TYPE_OTHER = 100;
}

// A transaction may operate on a specific product type. This field indicates
// which type of product. These product types are currently derived from the
// product types used to file SAR forms.
enum ProductType {
  PRODUCT_TYPE_UNSPECIFIED = 0;
  // official government issued currency of the United States
  PRODUCT_TYPE_US_CURRENCY = 1;
  // official government issued currency of any country or jurisdiction not including the United States
  PRODUCT_TYPE_FOREIGN_CURRENCY = 3;
  // physical paper instrument written, dated, and signed that directs a bank to pay a specific sum of money to the bearer
  PRODUCT_TYPE_CHECK = 4;
  // electronic transfer of funds across a network of banks
  PRODUCT_TYPE_WIRE = 5;
  // electronic bank-to-bank transfers processed through the Automated Clearing House network
  PRODUCT_TYPE_ACH = 6;
  // electronic transfer of money over an online network
  PRODUCT_TYPE_ELECTRONIC_FUNDS_TRANSFER = 7;
  // payment card that deducts money directly from a checking account
  PRODUCT_TYPE_DEBIT_CARD = 8;
  // payments card in which charges are made against a line of credit instead of deposits
  PRODUCT_TYPE_CREDIT_CARD = 9;
  // reloadable card allowing for only the amount of spending that has been deposited to the account
  PRODUCT_TYPE_PREPAID_CARD = 10;
  // certificate, usually issued by a government or banking institution, that allows the stated payee to receive cash on demand
  PRODUCT_TYPE_MONEY_ORDER = 11;
  // certificate, issued by a banking institution, that allows the stated payee to receive cash on demand
  PRODUCT_TYPE_CASHIER_CHECK = 12;
  // physical paper instrument with a fixed amount typically used by people on vacation in foreign countries
  PRODUCT_TYPE_TRAVELER_CHECK = 13;
  // short-term unsecured promissory notes issued by companies
  PRODUCT_TYPE_COMMERCIAL_PAPER = 14;
  // certificates that assign ownership of a public company
  PRODUCT_TYPE_STOCKS = 15;
  // fixed income instrument which represents a loan made by an investor to a borrower
  PRODUCT_TYPE_BOND_NOTE = 16;
  // mortgage loan secured by a commercial property
  PRODUCT_TYPE_COMMERCIAL_MORTGAGE = 17;
  // loan that the borrower uses to purchase or maintain a home or other form of real estate and agrees to pay back over time
  PRODUCT_TYPE_MORTGAGE = 18;
  // legal agreement to buy or sell a particular commodity asset, or security at a predetermined price at a specified time in the future
  PRODUCT_TYPE_FUTURES = 19;
  // policy where an individual or entity receives financial protection or reimbursement against losses
  PRODUCT_TYPE_INSURANCE = 20;
  // investment vehicle that pools money from investors to purchase a variety of different assets
  PRODUCT_TYPE_MUTUAL_FUND = 21;
  // derivative instrument that allows, but does not obligate, the holder to buy or sell the underlying asset
  PRODUCT_TYPE_OPTION = 22;
  // equity of a public company with low market capitalization value, usually below $300MM
  PRODUCT_TYPE_MICROCAP_SECURITY = 23;
  // security with a value that is reliant upon or derived from, an underlying asset or group of assets
  PRODUCT_TYPE_DERIVATIVE = 24;
  // issued by a casino or card club which denotes the convertable amount to USD
  PRODUCT_TYPE_GAMING_INSTRUMENT = 25;
  // Another product type that is not enumerated here.
  PRODUCT_TYPE_OTHER = 100;
}

// An enum specifying the type of address being used.
enum AddressType {
  ADDRESS_TYPE_UNSPECIFIED = 0;
  // A residential address, usually a home or apartment.
  ADDRESS_TYPE_RESIDENTIAL = 1;
  // A business address.
  ADDRESS_TYPE_BUSINESS = 2;
  // A Post Office box.
  ADDRESS_TYPE_PO_BOX = 3;
  // A military address.
  ADDRESS_TYPE_MILITARY = 4;
  // Another address type not enumerated here.
  ADDRESS_TYPE_OTHER = 100;
}

// Specifies the type of payload that this message is in response to
enum EventResponseType {
  EVENT_RESPONSE_TYPE_UNSPECIFIED = 0;
  EVENT_RESPONSE_TYPE_ENTITY = 1;
  EVENT_RESPONSE_TYPE_ACCOUNT = 2;
  EVENT_RESPONSE_TYPE_ACCOUNT_ENTITY_LINK = 3;
  EVENT_RESPONSE_TYPE_TRANSACTION = 4;
}
