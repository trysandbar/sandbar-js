#!/usr/bin/env ts-node-script
import { SandbarDataService } from "../generated/sandbar"
import { HttpRule } from "../generated/google/api/http"
import { readMethodOption } from "@protobuf-ts/runtime-rpc"
import path from "path"
import { Readable, pipeline } from "stream"
import fs from "fs"
import { promisify } from "util"
const pipelineAsync = promisify(pipeline)

function getHttpPaths() {
  let result: { [key: string]: string } = {}
  for (const methodInfo of SandbarDataService.methods) {
    const { localName, name } = methodInfo
    const path = getHttpPathForMethod(localName)
    result[name] = path
  }
  return result
}

function getHttpPathForMethod(method: string) {
  const rule = readMethodOption(
    SandbarDataService,
    method,
    "google.api.http",
    HttpRule
  )
  if (!rule) {
    throw new Error("Expected method ${methodName} to have HTTP bindings")
  }
  if (rule.body != "*") {
    throw new Error(
      "HTTP bindings with any body option other than '*' are not supported"
    )
  }
  if (rule.pattern.oneofKind !== "post") {
    throw new Error("Only POST bindings are supported")
  }

  if (rule.pattern.post.match(/[:*{}=]/)) {
    throw new Error("POST bindings with templates are not supported")
  }

  return rule.pattern.post
}

function httpPathsAsTypescript(
  paths: { [key: string]: string },
  repoRoot: string
) {
  const scriptPath = path.relative(repoRoot, __filename)
  const out = new Readable()
  out.push(`// Generated by ${scriptPath}\n`)
  out.push("// Do not edit by hand.\n")
  out.push("export default {\n")
  for (const [key, value] of Object.entries(paths)) {
    out.push(`  "${key}": "${value}",\n`)
  }
  out.push("}\n")
  out.push(null)
  return out
}

async function main() {
  const repoRoot = path.resolve(path.join(__dirname, "../.."))
  const outPath = path.join(repoRoot, "src/generated/method-paths.ts")
  const outStream = fs.createWriteStream(outPath, "utf8")
  const paths = getHttpPaths()
  const readStream = httpPathsAsTypescript(paths, repoRoot)
  await pipelineAsync(readStream, outStream)
}

if (require.main == module) {
  main()
}
